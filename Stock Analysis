import streamlit as st
import requests
import pandas as pd
import numpy as np

# Placeholder for your FMP API key
API_KEY = 'YOUR_API_KEY_HERE'

# Helper functions
def fetch_income_statement(ticker):
    url = f"https://financialmodelingprep.com/api/v3/income-statement/{ticker}?limit=6&apikey={API_KEY}"
    r = requests.get(url)
    if r.status_code == 200:
        return r.json()
    return None

def fetch_key_metrics(ticker):
    url = f"https://financialmodelingprep.com/api/v3/key-metrics/{ticker}?limit=1&apikey={API_KEY}"
    r = requests.get(url)
    if r.status_code == 200:
        return r.json()
    return None

def fetch_profile(ticker):
    url = f"https://financialmodelingprep.com/api/v3/profile/{ticker}?apikey={API_KEY}"
    r = requests.get(url)
    if r.status_code == 200:
        return r.json()
    return None

def calculate_cagr(start, end, periods):
    try:
        if start > 0 and end > 0 and periods > 0:
            return (end / start) ** (1 / periods) - 1
    except Exception:
        pass
    return np.nan

def get_metrics_for_ticker(ticker):
    ticker = ticker.upper().strip()
    income = fetch_income_statement(ticker)
    key_metrics = fetch_key_metrics(ticker)
    profile = fetch_profile(ticker)

    # Revenue CAGR (5Y)
    cagr = np.nan
    if income and len(income) >= 6:
        try:
            rev_start = income[5]['revenue']
            rev_end = income[0]['revenue']
            cagr = calculate_cagr(rev_start, rev_end, 5)
        except Exception:
            cagr = np.nan

    # P/E Ratio
    pe_ratio = np.nan
    de_ratio = np.nan
    if key_metrics and len(key_metrics) > 0:
        pe_ratio = key_metrics[0].get('peRatio', np.nan)
        de_ratio = key_metrics[0].get('debtEquityRatio', np.nan)

    # Beta
    beta = np.nan
    if profile and len(profile) > 0:
        beta = profile[0].get('beta', np.nan)

    return {
        'Ticker': ticker,
        'Revenue CAGR (5Y)': cagr * 100 if not np.isnan(cagr) else 'N/A',
        'P/E Ratio': pe_ratio if pe_ratio is not None else 'N/A',
        'Beta': beta if beta is not None else 'N/A',
        'D/E Ratio': de_ratio if de_ratio is not None else 'N/A',
    }

# Streamlit UI
st.title('Stock Metrics Dashboard')
st.write('Enter one or more stock tickers (comma-separated):')
ticker_input = st.text_input('Tickers', 'AAPL, MSFT, TSLA')

if st.button('Fetch Data'):
    tickers = [t.strip().upper() for t in ticker_input.split(',') if t.strip()]
    results = []
    for ticker in tickers:
        with st.spinner(f'Fetching data for {ticker}...'):
            metrics = get_metrics_for_ticker(ticker)
            results.append(metrics)
    df = pd.DataFrame(results)
    st.subheader('Results')
    st.dataframe(df, use_container_width=True)

    # Download as CSV
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button(
        label='Download as CSV',
        data=csv,
        file_name='stock_metrics.csv',
        mime='text/csv',
    )

    # Highlight errors
    if any(df['Revenue CAGR (5Y)'] == 'N/A'):
        st.warning('Some tickers may be invalid or missing data.')

st.caption('Powered by Financial Modeling Prep API')
